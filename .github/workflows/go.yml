# This workflow exemplifies how to build and release a CGo-encumbered Go
# project with GoReleaser.
#
# Background: https://goreleaser.com/customization/build/#import-pre-built-binaries
#
# Note that this workflow requires GoReleaser Pro (a paid subscription),
# because the workflow relies upon the GoReleaser Pro "pre-built binaries"
# feature, which is not available in the standard GoReleaser distribution.
#
# This workflow will run on any push. That is to say, it runs if you push
# to a branch, or tag a release.
#
# The basic sequence is:
#
# - "go-test" job is executed, on an OS matrix (macos/darwin, linux, windows).
# - If that succeeds, "build-binaries-X" jobs run for darwin, linux, and windows.
#   - Note that there are separate Linux jobs for "amd64" and "arm64", because
#     they require distinct config. Perhaps it"s possible to collapse those distinct
#     Linux configs into one build?
#   - Thus there are five distinct GoRelease config files required:
#     - .goreleaser-darwin.yml
#     - .goreleaser-windows.yml
#     - .goreleaser-linux-amd64.yml
#     - .goreleaser-linux-arm64.yml
#     - .goreleaser.yml: this is the master config that performs publishing.

# - If the "build-binaries-X" jobs all succeed, then the "publish" job runs.
#   It executes the ".goreleaser.yml"
#
# The "publish" job runs only if the release is tagged with a value prefixed
# with "v", e.g. "v1.0.1". Note also that the build jobs ("build-binaries-darwin",
# "build-binaries-windows" etc.) will set the GoReleaser "--skip-validate" flag
# to true or false, depending upon whether this is a tagged release. This state
# is stored in "env.NO_PUBLISH".
name: GoReleaser CGo workflow
on:
  push:
    paths-ignore:
      - 'sqlitr2.json' # This is updated by scoop; no need to run a new build

env:
  GO_VERSION: 1.19.2
  GORELEASER_VERSION: 1.12.3

  # NO_PUBLISH is true if the tag doesn't start with "v", e.g. "v1.0.1".
  NO_PUBLISH: ${{ !startsWith(github.ref, 'refs/tags/v') }}

jobs:

  debug-dump:
    runs-on: ubuntu-22.04

    steps:
      - name: Dump github context
        run: echo '${{ toJSON(github) }}'
      - name: Dump env context
        run: echo '${{ toJSON(env) }}'

  go-test:
    strategy:
      matrix:
        os: [ macos-12, ubuntu-22.04, windows-2022]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build
        run: go build -v ./...

      - name: Test
        run: go test -v  ./...


  build-binaries-darwin:
    needs: go-test
    runs-on: macos-12

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: GoReleaser (build darwin binaries)
        uses: goreleaser/goreleaser-action@v3
        with:
          distribution: goreleaser-pro
          version: ${{ env.GORELEASER_VERSION }}
          # It is important to provide the --skip-validate value. For tagged
          # workflow executions (e.g. "v1.0.1"), --skip-validate should be
          # false. For non-tagged workflows (e.g. a push to an open PR),
          # goreleaser will fail if --skip-validate is not set to false.
          args: build --skip-validate=${{ env.NO_PUBLISH }} --rm-dist -f .goreleaser-darwin.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
          GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}

      - name: Upload artifacts (darwin)
        uses: actions/upload-artifact@v3
        with:
          name: dist-darwin
          path: dist-darwin

  build-binaries-linux-amd64:
    needs: go-test
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: GoReleaser (build linux-amd64 binaries)
        uses: goreleaser/goreleaser-action@v3
        with:
          distribution: goreleaser-pro
          version: ${{ env.GORELEASER_VERSION }}
          args: build --skip-validate=${{ env.NO_PUBLISH }} --rm-dist -f .goreleaser-linux-amd64.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
          GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}

      - name: Upload artifacts (linux-amd64)
        uses: actions/upload-artifact@v3
        with:
          name: dist-linux-amd64
          path: dist-linux

  build-binaries-linux-arm64:
    needs: go-test
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install toolchain dependencies
        run: |
          sudo apt update
          sudo apt install -y gcc-aarch64-linux-gnu

      - name: GoReleaser (build linux-arm64 binaries)
        uses: goreleaser/goreleaser-action@v3
        with:
          distribution: goreleaser-pro
          version: ${{ env.GORELEASER_VERSION }}
          args: build --skip-validate=${{ env.NO_PUBLISH }} --rm-dist -f .goreleaser-linux-arm64.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
          GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}

      - name: Upload artifacts (linux-arm64)
        uses: actions/upload-artifact@v3
        with:
          name: dist-linux-arm64
          path: dist-linux

  build-binaries-windows:
    needs: go-test
    runs-on: windows-2022

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: GoReleaser (build windows binaries)
        uses: goreleaser/goreleaser-action@v3
        with:
          distribution: goreleaser-pro
          version: ${{ env.GORELEASER_VERSION }}
          args: build --skip-validate=${{ env.NO_PUBLISH }} --rm-dist -f .goreleaser-windows.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
          GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}

      - name: Upload artifacts (windows)
        uses: actions/upload-artifact@v3
        with:
          name: dist-windows
          path: dist-windows

  publish:
    needs: [ build-binaries-darwin, build-binaries-linux-amd64, build-binaries-linux-arm64, build-binaries-windows ]
    runs-on: ubuntu-22.04

    # Note: we can't use env.NO_PUBLISH in the job "if" conditional, presumably
    # because the job runner machine isn't created until after the conditional
    # is evaluated, and thus there is no env context to access.
    if: ${{startsWith(github.ref, 'refs/tags/v')}}

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Download artifacts (darwin)
      uses: actions/download-artifact@v3
      with:
        name: dist-darwin
        path: dist-darwin

    - name: Download artifacts (linux-amd64)
      uses: actions/download-artifact@v3
      with:
        name: dist-linux-amd64
        path: dist-linux

    - name: Download artifacts (linux-arm64)
      uses: actions/download-artifact@v3
      with:
        name: dist-linux-arm64
        path: dist-linux

    - name: Download artifacts (windows)
      uses: actions/download-artifact@v3
      with:
        name: dist-windows
        path: dist-windows

    - name: GoReleaser (publish)
      uses: goreleaser/goreleaser-action@v3
      with:
        distribution: goreleaser-pro
        version: ${{ env.GORELEASER_VERSION }}
        args: release -f .goreleaser.yml
      env:
        GITHUB_TOKEN: ${{ secrets.GH_PAT }}
        GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}
        FURY_TOKEN: ${{ secrets.FURY_TOKEN }}
